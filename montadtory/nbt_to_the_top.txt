
#include "libft.h"
#include <stdio.h>
#include<unistd.h>

int *f(int a)
{
    int *ptr;
	ptr = (int *)malloc(4);
	*ptr = a;
	return ptr;
}
void nbr_in_top_of_satck(t_list **a, int min_position, int size)
{
    int index = 0;
    
     if ((min_position <= size/2) || size - min_position == size / 2)
   {
       while (min_position > 1  )
       {
            if (min_position == 2 && (*(int *)(*ft_lstlast(*a)).content < (*(int *)(*a) -> content)))
                   {
                       ft_sa(*a);
                        return;
                   }
            ft_rra_rrb(a);
            min_position--;
       }
   }
   else
   {
        while ((min_position > size/2))
       {
           if (min_position > size)
              return;
            ft_ra_rb(a);
            min_position++;
       }
   }
}

int main(int argc, char **argv)
{
	t_list *a;
    t_list *b;
	t_list *node;
    int i = 1;
    int min_position;
    int size = 1;
    int sum;
    sum = 0;
    while (i < argc)
     {
        sum +=ft_atoi(argv[i]);
        node = ft_lstnew(f(ft_atoi(argv[i])));
        ft_lstadd_back(&a,node);
        i++;
    }
     nbr_in_top_of_satck(&a, miin_node(a, &size) , ft_lstsize(a));
     print_f(a);

    //  printf("\n sum %d moiyan  %d\n",sum ,sum/(argc - 1));
    //   printf("sum  %d of first part \n",ft_sum(a, ((argc -1)/2))/ ((argc -1)/2));
    //    printf("moyan of the first part %d\n" ,(sum/argc)/(argc/2));
//    instruction(&a, size, &b, sum);
//   nbr_in_top(&b, max_node(b, &size), ft_lstsize(b));
//   int index= 0;
//   while (b)
//       ft_pa(&a,&b);

//  printf("\n  (%d)",ft_lstsize(a));
//  printf("\n  (%d)",check_list(a));
//  print_f(a);
//  print_f(b);
}